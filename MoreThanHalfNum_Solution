class Solution1 {
public:
	int MoreThanHalfNum_Solution(vector<int> numbers) {
		int n = numbers.size();
        if(n == 0) return 0;
        int candidate = numbers[0];
        int times = 1;
        for(int i = 1; i < n; ++i){
            if(times == 0){
                candidate = numbers[i];
                times++;
            }
            else if(candidate == numbers[i]){
                times++;
            }
            else {
                times--;
            }
        }
        times = 0;
        for(int i = 0; i < n; ++i){
            if(numbers[i] == candidate) times++;
        }
        if(times<=n/2) candidate = 0;
        return candidate;
	}
};
class Solution2 {
public:
	int MoreThanHalfNum_Solution(vector<int> numbers) {
    	int n = numbers.size();
        if(n == 0) return 0;
        int middle = n>>1;
        int start = 0;
        int end = n-1;
        int index = Partition(numbers,start,end);
        while(index!=middle){
			if(index>middle){
                end = index-1;
                index = Partition(numbers,start,end);
            }
            else{
                start = index+1;
                index = Partition(numbers,start,end);
            }
        }
        int result = numbers[middle];
        int times = 0;
        for(int i = 0; i < n; ++i){
            if(numbers[i] == result) times++;
        }
        if(times<=n/2) result = 0;
        return result;
    }
    
    int Partition(vector<int> numbers,int start,int end){
        int index = RandomInRange(start,end);
        Swap(numbers[index],numbers[end]);
        
        int small = start-1;
        for(index = start;index < end;++index){
            if(numbers[index] < numbers[end])
                {
                	++small;
                	if(small!=index)
                        Swap(numbers[index],numbers[small]);
               
            }
        }
        ++small;
        Swap(numbers[small],numbers[end]);
        return small;
    }
    
    void Swap(int& m,int& n){
        int temp = n;
        n = m;
        m = temp;
    }
    
   	int RandomInRange(int start, int end)  
	{  
    	srand(time(NULL));  
  
    	return start + rand()%(end-start+1);  
	}    
};
